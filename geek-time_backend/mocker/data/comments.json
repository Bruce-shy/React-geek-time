[
    {
        "id": 100017301,
        "comments": [{"code":0,"data":{"list":[{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":234833,"user_header":"https://static001.geekbang.org/account/avatar/00/16/c5/3e/2bb7edc9.jpg","comment_ctime":1594806659,"can_delete":false,"user_name":"一一","product_type":"c1","replies":null,"uid":1492286,"ucode":"B4E5F0370ACA2E","score":1594806659118113,"comment_content":"对这门课的评价就两个字：优秀。已经推荐给好朋友了，他们都订阅了。","like_count":0,"aid":81835},{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":231116,"user_header":"","comment_ctime":1593588305,"can_delete":false,"user_name":"Geek_93d0fd","product_type":"c1","replies":null,"uid":2050816,"ucode":"11A478482829F8","score":1593588305015444,"comment_content":"评论区一堆高手  来晚了\n","like_count":0,"aid":40961},{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":227685,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bPOAaJUNs9VCruDL2aFBia0GUL9L093oyssSUCtZx5buvc66z4B4MQBbgn3HtUpUaMsQ6KdoTHZia8JibM4iaPPvFA/132","comment_ctime":1592453184,"can_delete":false,"user_name":"Geek_e8a54b","product_type":"c1","replies":null,"uid":1765124,"ucode":"1F71369F8A11EE","score":1592453184305157,"comment_content":"我为什么想学习数据结构与算法，原因有三：1、随着工作年限变长，越来越觉得自己的知识储备欠缺起来；2、接触的工作内容也由简单的重复劳动变成了思维密集型的；3、半路出道，对这些计算机专业的基础课程非常感兴趣，而且在工作中遇到的某些问题最后真的是由这些基础知识解决的。","like_count":0,"aid":39972},{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":216043,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/72/3aeca403.jpg","comment_ctime":1589173282,"can_delete":false,"user_name":"不需往后看","product_type":"c1","replies":null,"uid":1015410,"ucode":"33EB4793C67B72","score":1589173282586261,"comment_content":"用两个堆来求中位数这个学到了，很秀 😂，我有个形象点的理解，分享一下\n\n想象：有两个锥形瓶, 灌满重量不同的小球，将大顶堆倒立，罗在小顶堆上面，整体看像一个沙漏⏳, 想象沙漏里装满了小球，根据大顶堆和小顶堆的规则，最上面的小球重量是最小的，最下面的小球重量是最大的，两个锥形瓶顶点交界处就是处于中间重量的小球，即中位数，插入元素就相当于把小球扔到沙漏里，沙漏会根据大顶堆和小顶堆的规则自动调整排列，这样堆顶处一直是中位数","like_count":0,"aid":70187},{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":215515,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_ctime":1589007733,"can_delete":false,"user_name":"Geek_ac7784","product_type":"c1","replies":null,"uid":1981613,"ucode":"62F0E5E6D6F4BA","score":1589007733131841,"comment_content":"哈希算法:\n五、负载均衡\n这个问题是从没有想过的，因为没接触过过类似的东西。就是想让一个人的所有请求都由同一个服务器来应答。并且每个服务器大致有相同的负载。解决办法是哈希算法得到哈希值的平均性保证服务器负载均衡，同时保证每个用户ID或会话ID都由同一个服务器应答。\n六、数据分片\n    1. 处理海量数据是，多机工作。将海量数据求哈希值，对机器数取模，得到的结果就是分配的机器\n    2. 估算大致需要的机器数，也是个技能\n七、分布式存储\n    1. 和数据分片类似。\n    2. 扩容时，取模得到的机器号变动问题。可以用一致性哈希算法来解决。没怎么听懂。感觉是每个机器得到哈希值在一定范围内的数据。增加机器时，机器对应的哈希值是一定的范围，所以只会移动一部分数据。但是这跟一致性哈希算法有什么关系？一致性哈希算法又是什么？\n思考题：\n     我觉得还是消化一下这7个应用吧...\n","like_count":0,"aid":67388},{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":213638,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_ctime":1588497546,"can_delete":false,"user_name":"Geek_ac7784","product_type":"c1","replies":null,"uid":1981613,"ucode":"62F0E5E6D6F4BA","score":1588497546716383,"comment_content":"学习感悟：\n1. 排排序要从执行效率，内存消耗、稳定性三个方面进行分析。\n2. 对于执行效率的分析：\n    1. 需要分析最优和最坏的时间复杂度分析方法和对应的情况。平均时间复杂度的分析引入了一个新的概念：逆序度、有序度、满有序度。\n    2. 不能忽略系数、低阶甚至常数。\n    3. 比较和交换的次数。\n3. 一串n个数字，从前往后会形成n(n-1)\u0026#47;2个数据对。如果他们全是有序的，称该情况的有序度为满有序度。逆序度是逆序数对的数量，有序度是有序数对的数量。所以从数量关系上来看，逆序度+有序的=总数对数，也就是满有序度。\n4. 易知排序算法的交换次数最少为逆序度，而比较次数要看具体情况。但容易理解的是，插入排序和冒泡排序的。最坏情况二者比较次数均为n(n-1)\u0026#47;2次，最好情况比较次数都是n-1次。但是平均情况的分析，用逆序度为n(n-1)\u0026#47;4的情况来分析，二者都是O(n方)\n5. 插入排序要比冒泡排序少一定的比较次数。最终结果虽然都是O(n方），但是插入排序效果要好一些。\n6  排序算法三问？空间复杂度(原地排序),，稳定情况，时间复杂度包括三种\n7. 选择排序-原地排序，一种不稳定的排序方式，时间复杂度都是O(n方）,因为不管好坏，选择排序几乎都经历了一样的过程。\n8. 细致分析插入排序和冒泡排序：除了之前分析的比较次数外，冒泡排序的交换数据需要三次赋值和一次flag的更新，而插入排序只需要将该位置向后移一位就行了，简单的多\n9. 综上，插入排序用的多。另外两种几乎可以扔进故纸堆了。\n链表的排序操作：不考虑更改节点数据，而是改变位置\n冒泡：比较次数与交换次数不变，但是交换操作更复杂，因为涉及到前后四个结点\n插入：容易实现一点，甚至不需要移动数据，找到位置直接插。但是寻找插入点得变成从前往后。想法：遍历原链表，一个一个掰下来，插入新的有序链表。需要一个头结点。\n选择：也容易实现，使用新链表技术，复杂度跟原来一样，几乎是插入排序的另一种思路。一个是找未排序链表的最小值，一个是在排序链表中找正确的位置。比较次数有明显不同。","like_count":0,"aid":41802},{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":207263,"user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/76/69aada7c.jpg","comment_ctime":1587039496,"can_delete":false,"user_name":"₯㎕","product_type":"c1","replies":null,"uid":1080182,"ucode":"6E06492D0FBA54","score":1587039496898758,"comment_content":"数组需要提前指定大小，当空间不够时需要进行搬移数据，数据查询根据下标直接访问速度快，插入和删除需要遍历操作速度慢但是可以通过cpu预先缓存提高效率\n链表通过地址进行访问，不需要搬移数据，插入删除速度比较快不需要搬移数据，查询比较慢需要遍历\n链表主要有单向链表，单向循环链表，双向链表，双向循环链表\n\n使用单项有序链表实现lru缓存淘汰算法，将经常访问的数据搬移到首部，长期不需要的就会在尾部，当链表满时将尾部的数据丢弃。\n\n使用数组实现lru缓存淘汰算法，判断访问到的数据是否在数组中，在的话放到第一个，其他数据向后搬移，不在的话插入第一个，其他数据向后搬移，超过数组大小的元素删除掉\n","like_count":1,"aid":41013},{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":204581,"user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_ctime":1586424101,"can_delete":false,"user_name":"KK","product_type":"c1","replies":null,"uid":1324863,"ucode":"FFC31A3FE3A285","score":1586424101130848,"comment_content":"有深度！好文！工业级别的文章就应该是这样的。","like_count":3,"aid":64586},{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":195421,"user_header":"","comment_ctime":1585187106,"can_delete":false,"user_name":"Geek_crazycatmax","product_type":"c1","replies":null,"uid":1920722,"ucode":"5419044F6EA0E3","score":1585187106443784,"comment_content":"从事前端开发若干年，一直想夯实计算机基础却无从下手，感谢作者分享宝贵的经验。他日若有所作为，必当面道谢~","like_count":1,"aid":81835},{"had_liked":false,"product_id":100017301,"comment_is_top":false,"id":194333,"user_header":"https://static001.geekbang.org/account/avatar/00/14/7e/95/56224a2f.jpg","comment_ctime":1585051364,"can_delete":false,"user_name":"耿森","product_type":"c1","replies":null,"uid":1343125,"ucode":"16E00EAE680E50","score":1585051364385782,"comment_content":"从前学习数据结构与算法，看过一些简易书籍，只是粗浅的懂，很多细节和具体使用情况都不是太了解，读了争哥的专栏，就相当帮我打通了这门课的任督二脉，受益匪浅。希望争哥可以给大家带来更多的好专栏，另外提一下，争哥的设计模式也很棒！！！","like_count":1,"aid":81835}],"page":{"more":true}},"error":{},"extra":{"cost":0.105101688,"request-id":"0a8d555c7bb6a3b83fbafa6e687ca151@2@time"}}]
    },
    {
        "id": 100020801,
        "comments": [{"code":0,"data":{"list":[{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":237536,"user_header":"https://static001.geekbang.org/account/avatar/00/15/52/67/fcba0967.jpg","comment_ctime":1595857566,"can_delete":false,"user_name":"zapup","product_type":"c1","replies":null,"uid":1397351,"ucode":"388D6BB5D7B137","score":1595857566460314,"comment_content":"和朋友开玩笑说：\n- 以前用 mysql 觉得常用的功能都够用就行了\n- 看了《高性能mysql》后，了解了一些原理知识觉得更稳了，面试也不怕了\n- 专栏学到一半时，再也不敢跟人说「我会 MySQL」\n\n跟下来半个月了，酣畅淋漓，茅塞顿开\n信息量巨大，配图的笔记都有90+页，明天开始复习，值得多刷\n\n再次感谢林老师与幕后编辑工作者的辛勤付出！","like_count":1,"aid":83183},{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":217994,"user_header":"","comment_ctime":1589688720,"can_delete":false,"user_name":"Geek_30fab2","product_type":"c1","replies":null,"uid":1938695,"ucode":"833A3FBFC04527","score":1589688720790268,"comment_content":"RC和RR隔离级别最主要就是生成ReadView的时机不同前者是每次查询都重新生成ReadView后者则是只认准第一次生成ReadView，而在于多事务读主要是小于或者等于活跃事务都可见，并且是基于快照读！而update会自动加行锁中的X锁，select不管加X锁还是S锁都是当前读！当前读其实就是最新的数据，快照读其实就是读的undo日志里面的旧值","like_count":0,"aid":70562},{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":210033,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8oWca0FXerDicV5k7h0GD9MOibsy9D3c086WWB053iaBUw1IZQ1PSIMvcV7cmDw5jvQY9mnzosdYDg/132","comment_ctime":1587655019,"can_delete":false,"user_name":"天夙","product_type":"c1","replies":null,"uid":1387525,"ucode":"593E6F8BF69B1A","score":1587655019981862,"comment_content":"时隔一年，为了找工作二刷而且认认真真的看完了，真的是收获太多了，谢谢老师！","like_count":0,"aid":83183},{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":208941,"user_header":"","comment_ctime":1587468909,"can_delete":false,"user_name":"李红玉","product_type":"c1","replies":null,"uid":1960599,"ucode":"739CCADD91A57C","score":1587468909281533,"comment_content":"这是我至今为止 看到的资源里 ，对事物隔离级别定义 讲的最好的 ","like_count":1,"aid":68963},{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":202383,"user_header":"https://static001.geekbang.org/account/avatar/00/1d/68/aa/c4b7d3a3.jpg","comment_ctime":1585980748,"can_delete":false,"user_name":"Jimmy","product_type":"c1","replies":null,"uid":1927338,"ucode":"A71AF38CFD7786","score":1585980748601389,"comment_content":"从问题引申到原理，很棒的教程和经验分享，受益良多。","like_count":1,"aid":83556},{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":195818,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/0e/abb7bfe3.jpg","comment_ctime":1585216765,"can_delete":false,"user_name":"Robin","product_type":"c1","replies":[{"ctime":1585231571,"user_name_real":"林晓斌","uid":1264162,"id":74353,"content":"“开发中我成了MySQL专家”  👍👍 ","utype":1,"comment_id":195818,"user_name":"作者回复"}],"uid":1011214,"ucode":"99B70047AF1093","score":1585216765021111,"comment_content":"今天我才结业，收获良多，开发中我成了MySQL专家，很不舍就这么结束了。","like_count":0,"aid":83556},{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":173760,"user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/d7/d1049bae.jpg","comment_ctime":1579680890,"can_delete":false,"user_name":"Geek_3004e0","product_type":"c1","replies":null,"uid":1732823,"ucode":"441D39BDC39E4A","score":1579680890717305,"comment_content":"迟一年看到的课程，收益很多，感谢。\n看的时候想到的问题，都在留言部分找到，留言的问题已经老师的解答给了很大帮助，非常推荐的一个专栏。","like_count":0,"aid":83556},{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":163877,"user_header":"https://static001.geekbang.org/account/avatar/00/14/02/43/1c2fb7b3.jpg","comment_ctime":1576816386,"can_delete":false,"user_name":"Bourne","product_type":"c1","replies":null,"uid":1311299,"ucode":"1286279F70B13F","score":1576816386833400,"comment_content":"这个专栏很值，能学到很多东西，在此谢谢老师，谢谢您。说实话看评论都能学到很多东西，老师也很负责，给同学们答疑解惑，真的很感谢，希望老师以后还能出更多专栏、同时自己也能坚持学。","like_count":2,"aid":75659},{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":152833,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6FmlwOSTIIrJy72VSmJXHZLricZFSrNC8Fw2434Yfw7OW4ic45d0ErJqv6GuXBCwbe9jKGJ8AZ5NdmOHCrTua6QA/132","comment_ctime":1574085351,"can_delete":false,"user_name":"有财君","product_type":"c1","replies":null,"uid":1438119,"ucode":"22B6EE18F7EBE4","score":1574085351710283,"comment_content":"我仔仔细细的读完了专栏，同样的，我也在其他的地方参加过MySQL的课程，有便宜的，有不要钱的，有贵的，总的来说极客时间的MySQL实战45讲非常贴合实际，学习曲线平滑，适合那些刚入门还有点糊涂的DBA，也适合有了比较丰富经验的DBA。\n这门课有实战，有深度，有思考，除了教会纸面写出来的东西之外，也是引了一条路给诸位，感谢老师。\n在此也建议各位，MySQL的课程没必要买太贵的，开源软件，什么不懂就去看文档，文档不详细就去看代码。","like_count":0,"aid":83556},{"had_liked":false,"product_id":100020801,"comment_is_top":false,"id":146940,"user_header":"https://static001.geekbang.org/account/avatar/00/19/12/f3/e54dae78.jpg","comment_ctime":1572709041,"can_delete":false,"user_name":"stand by me","product_type":"c1","replies":null,"uid":1643251,"ucode":"66E43DD6441354","score":1572709041578058,"comment_content":"老师真的讲的太好了！！！受益匪浅。\n\n每个例子我都试了一下。我发现第三个主键索引范围群这个例子里面MYSQL 8.0.18版本不会在主键15上加上锁了，因此更新可以成功。赶紧看了一下，发现老师提前就说了不包括这个版本，MySQL的加锁规则应该是变了。","like_count":0,"aid":75659}],"page":{"more":true}},"error":{},"extra":{"cost":0.027683077,"request-id":"63af5322bb961135d9f93f2effa894fd@2@time"}}]
    },
    {
        "id":100006701,
        "comments": [
           {"code":0,"data":{"list":[{"had_liked":false,"product_id":100006701,"comment_is_top":false,"id":64307,"user_header":"https://static001.geekbang.org/account/avatar/00/11/29/78/1eea1af1.jpg","comment_ctime":1548740964,"can_delete":false,"user_name":"咖啡控","product_type":"c1","replies":[{"ctime":1549818177,"user_name_real":"杨晓峰","uid":1009360,"id":23346,"content":"谢谢，共同交流提高，工作比较忙，后续计划暂时未定","utype":1,"comment_id":64307,"user_name":"作者回复"}],"uid":1124728,"ucode":"E8D994E2E80266","score":1548740964693529,"comment_content":"非常感谢杨老师。全篇拜服了三遍以上，受益匪浅，特别是我这个从.Net转平台过来的人，完成工作之后还要知其所以然，是在好不过的教程了。\n不知杨老师以后还会不会再出专辑。","like_count":0,"aid":12963},{"had_liked":false,"product_id":100006701,"comment_is_top":false,"id":63808,"user_header":"https://static001.geekbang.org/account/avatar/00/13/cb/50/66d0bd7f.jpg","comment_ctime":1548514213,"can_delete":false,"user_name":"杰之7","product_type":"c1","replies":[{"ctime":1549817731,"user_name_real":"杨晓峰","uid":1009360,"id":23343,"content":"加油","utype":1,"comment_id":63808,"user_name":"作者回复"}],"uid":1297232,"ucode":"F7DA2E21085332","score":1548514213094447,"comment_content":"通过这一节的阅读学习,对Java平台有一个直观认识，工具的强大是期望能有效解决问题的。","like_count":0,"aid":6845},{"had_liked":false,"product_id":100006701,"comment_is_top":false,"id":59974,"user_header":"","comment_ctime":1547434475,"can_delete":false,"user_name":"马建超","product_type":"c1","replies":[{"ctime":1549811866,"user_name_real":"杨晓峰","uid":1009360,"id":23325,"content":"加油","utype":1,"comment_id":59974,"user_name":"作者回复"}],"uid":1359903,"ucode":"6759B5C25B829F","score":1547434475216310,"comment_content":"每天看一集，不断提高自己，加油","like_count":1,"aid":7810},{"had_liked":false,"product_id":100006701,"comment_is_top":false,"id":42864,"user_header":"https://static001.geekbang.org/account/avatar/00/14/39/fd/397afe9c.jpg","comment_ctime":1543065095,"can_delete":false,"user_name":"星哥，你好帅","product_type":"c1","replies":[{"ctime":1543194191,"user_name_real":"杨晓峰","uid":1009360,"id":15438,"content":"谢谢","utype":1,"comment_id":42864,"user_name":"作者回复"}],"uid":1325565,"ucode":"01AD2E522DF1C8","score":1543065095262197,"comment_content":"大神，读后有一种云开见月明的感觉","like_count":0,"aid":6845},{"had_liked":false,"product_id":100006701,"comment_is_top":false,"id":41128,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/38/ba6a106f.jpg","comment_ctime":1542729406,"can_delete":false,"user_name":"Phoenix","product_type":"c1","replies":[{"ctime":1543156619,"user_name_real":"杨晓峰","uid":1009360,"id":15388,"content":"互勉，加油💪","utype":1,"comment_id":41128,"user_name":"作者回复"}],"uid":1005368,"ucode":"C51BE4C948755B","score":1542729406232128,"comment_content":"终于抵达终点了，认真的一篇篇读下来，每篇都认真做笔记，\n专栏，对自己的技术视野，技术深度都提升很大，\n谢谢老师","like_count":0,"aid":12963},{"had_liked":false,"product_id":100006701,"comment_is_top":false,"id":38874,"user_header":"https://static001.geekbang.org/account/avatar/00/13/19/80/097463c6.jpg","comment_ctime":1542156136,"can_delete":false,"user_name":"7","product_type":"c1","replies":[{"ctime":1543194571,"user_name_real":"杨晓峰","uid":1009360,"id":15442,"content":"谢谢","utype":1,"comment_id":38874,"user_name":"作者回复"}],"uid":1251712,"ucode":"38E18CC1ACD034","score":1542156136377937,"comment_content":"第一遍刚刷完，准备刷第二遍，老师辛苦！","like_count":0,"aid":12963},{"had_liked":false,"product_id":100006701,"comment_is_top":false,"id":37583,"user_header":"https://static001.geekbang.org/account/avatar/00/10/97/77/dac7d3b3.jpg","comment_ctime":1541644742,"can_delete":false,"user_name":"文彦","product_type":"c1","replies":[{"ctime":1541906098,"user_name_real":"杨晓峰","uid":1009360,"id":13668,"content":"还是明确目的+实践，不一定非要都看jdk源码，初期明白并掌握通用原则更高效，比如 冠宝的 《阿里Java手册》或者经典书籍，并且达到水平还是要有代码量","utype":1,"comment_id":37583,"user_name":"作者回复"}],"uid":1087351,"ucode":"157C65813AF7E8","score":1541644742209027,"comment_content":"晓峰老师。最近感觉基础有点差，开始看jdk的源码，主要是结合api来看。但是感觉事倍功半，有什么好的建议吗？","like_count":6,"aid":12288},{"had_liked":false,"product_id":100006701,"comment_is_top":false,"id":35612,"user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/d8/e06ec517.jpg","comment_ctime":1540706454,"can_delete":false,"user_name":"维#","product_type":"c1","replies":[{"ctime":1540740082,"user_name_real":"杨晓峰","uid":1009360,"id":12672,"content":"非常形象、深入的总结","utype":1,"comment_id":35612,"user_name":"作者回复"}],"uid":1125848,"ucode":"DC5FFFD2C1E895","score":1540706454608681,"comment_content":"java的“一次编写，到处运行”，准确一点可以说是“一次编译，到处运行”，因为有了jvm的存在，编写的java代码编译为字节码，在任何平台的jvm虚拟机都可以上解释执行（简单点理解，抛开细节）。\n\njvm这种机制其实也是抽象和封装的体现，从01到汇编，从汇编到c，从c到java，不断地屏蔽底层的复杂性和繁琐的细节，供给上层的简单清晰的使用。我们“不用再去管硬件细节了”，“不用再去管内存了”，代码的看起来也更加人类语言了，jvm都让我们不用管操作系统平台了，至于过程中的性能啊，效率啊方面得失是值得的。\n\n最后 write once, run anywhere的感受是mac写代码，linux运行。\n\n","like_count":3,"aid":6845},{"had_liked":false,"product_id":100006701,"comment_is_top":false,"id":31021,"user_header":"https://static001.geekbang.org/account/avatar/00/11/09/56/871bfda5.jpg","comment_ctime":1539070163,"can_delete":false,"user_name":"涛","product_type":"c1","replies":[{"ctime":1540311821,"user_name_real":"杨晓峰","uid":1009360,"id":12425,"content":"加油💪","utype":1,"comment_id":31021,"user_name":"作者回复"}],"uid":1116502,"ucode":"745E5F381D1290","score":1539070163684943,"comment_content":"终于看完了36讲，刚入坑的小青年，专栏感觉还是很好的，系统、专业，希望自己早日成为大牛，用技术创造未来。","like_count":1,"aid":12963}],"page":{"more":false}},"error":{},"extra":{"cost":0.07014291,"request-id":"4af84c106c4f2183f0ea9386b00bed28@2@time"}}
        ]
    },
    {
        "id":100002201,
        "comments": [
            {"code":0,"data":{"list":[{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":236138,"user_header":"https://static001.geekbang.org/account/avatar/00/1f/a1/84/b0a53a49.jpg","comment_ctime":1595325297,"can_delete":false,"user_name":"今晚打老虎🐯","product_type":"c1","replies":null,"uid":2072964,"ucode":"22B5013BEE143B","score":1595325297090314,"comment_content":"耗子叔，您好！今年刚毕业，才接触到您这篇专栏，给我帮助很大，主要是给我指明了方向， 希望以后能凭自己实力，直接和您结识！\n\n现在Google封锁了国内IP（知识封锁影响真的太大了）中国软件崛起之路漫漫呀！","like_count":0,"aid":14321},{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":234631,"user_header":"https://static001.geekbang.org/account/avatar/00/1b/3b/fa/abe4d7c9.jpg","comment_ctime":1594738408,"can_delete":false,"user_name":"流云","product_type":"c1","replies":null,"uid":1784826,"ucode":"C6CA4811B6182D","score":1594738408369195,"comment_content":"汇编语言算是无类型语言，C语言引入了类型系统，C++ 又扩展了泛型编程，类型往底层反映了内存布局与管理策略，往上层抽象出算法的通用性，通过类型系统把这几种语言的理解推进了一大步，感谢左耳朵。\n\n下面为counter 新增了一个私有成员变量和一个构造函数，解决编译错误问题：\ntemplate\u0026lt;class T, class Cond\u0026gt;\nclass counter\n{\nprivate:\n    Cond cond;\n\npublic:\n    counter(Cond c):cond(c) { }\n\n    size_t operator()(size_t c, T t) const {\n        return c + (cond(t) ? 1 : 0);\n    }\n};","like_count":0,"aid":303},{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":232517,"user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_ctime":1594026522,"can_delete":false,"user_name":"梅端","product_type":"c1","replies":null,"uid":1525335,"ucode":"FEC08731457770","score":1594026522800683,"comment_content":"我也感觉这篇文章有点深，需要反复读才行，加油。","like_count":0,"aid":1609},{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":231796,"user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_ctime":1593771401,"can_delete":false,"user_name":"梅端","product_type":"c1","replies":null,"uid":1525335,"ucode":"FEC08731457770","score":1593771401380083,"comment_content":"透过现象看本质真的很关键，看完这篇文章，真的有一种醍醐灌顶的感觉。","like_count":0,"aid":865},{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":231119,"user_header":"https://static001.geekbang.org/account/avatar/00/1c/f7/03/f67ef964.jpg","comment_ctime":1593588555,"can_delete":false,"user_name":"刘文印@登录易","product_type":"c1","replies":null,"uid":1898243,"ucode":"601854E2BB16D3","score":1593588555903791,"comment_content":"确实，编程的目的就是对真实世界中业务的用计算机自动化，所以对其过程（代码）的抽象，建模都是为了编程实现，当然对其代码的重用和拼装可以进一步提高编程效率。","like_count":0,"aid":2017},{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":229600,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_ctime":1593072330,"can_delete":false,"user_name":"escray","product_type":"c1","replies":null,"uid":1020525,"ucode":"1F4204930E47C4","score":1593072330356197,"comment_content":"任何语言都有类型系统，静态语言的类型检查是在编译器进行语义分析时进行，而动态语言是在运行时做类型检查。\n\n如果从帮助程序员屏蔽底层机器代码实现的角度，我比较倾向于动态类型语言，但是程序员自己要清楚在用的是什么类型。\n\n很久很久以前，可能是因为还需要考虑机器的性能，所以静态语言和底层操作有用武之地，那么，现在计算资源比较充盈的时候，动态语言的接受度也就更高一些了。\n\n如果 C++ 是两者都想要，那么估计很难平衡。\n\nC# 中使用 var 关键字声明的类型，算是动态类型么？\n\n重复一下本课金句：类型是对内存的抽象。","like_count":0,"aid":2017},{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":228074,"user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_ctime":1592549398,"can_delete":false,"user_name":"微末凡尘","product_type":"c1","replies":null,"uid":1099525,"ucode":"25EDFD0914D0F4","score":1592549398881461,"comment_content":"沟通非常的重要，产品经理提出一个需求时候，必须先沟通好，用自己的话复述一遍，看看二者在理解上有什么偏差，是不是产品经理想要的东西，这样code出来的东西才是真正符合产品经理的需求，","like_count":0,"aid":28550},{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":227645,"user_header":"https://static001.geekbang.org/account/avatar/00/13/fa/90/adc23550.jpg","comment_ctime":1592448590,"can_delete":false,"user_name":"钱高明","product_type":"c1","replies":null,"uid":1309328,"ucode":"1DFE4B52E8C36A","score":1592448590350304,"comment_content":"在听这文章的时候，我想到了可能容错这个概念，是统一分布式系统所有知识的核心，几乎所有的设计方案都是围绕着容错进行的，无论是简单的Supervisor启动服务进程，K8S里Pod的重启机制，还是应用层面的限流，熔断，降级，都是为了保证系统的可用性，也就是所谓的弹性；而幂等，补偿，以及数据复制等设计方案，是为了保证系统的正确性，也从另一方案说明了系统的容错能力。","like_count":2,"aid":3912},{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":226198,"user_header":"","comment_ctime":1591977556,"can_delete":false,"user_name":"一墨","product_type":"c1","replies":null,"uid":2009734,"ucode":"2EFB72EEC69FE2","score":1591977556699434,"comment_content":"全文字字珠玑, 最有感觉的三句话: \n(1) “如果你觉得这些理论上的东西无用，那么只能说明，你只不过在从事工人的工作，而不是工程师的工作” 扎心了, 别问我为什么, 没有工作了3~5年的人体会不了这种扎心的痛, 但是还好有人与你有同感\n(2) “这里没有学习技术的速成的方法，真正的牛人不是能够培训出来的，一切都是要靠你自己去努力和持续地付出”, 是的啊, 回想一下自己, 这条路本质上是自己的选择, 初始无奈, 渐入佳境, 中途想过放弃, 但是觉得还是应该努力的走下去, 短视频的后浪并不是给年青人看的, 是给我们啊 \n(3) “你先问问自己有没有花十年磨一剑的决心，如果没有，那这篇文章对你没有任何作用” 从第三个本命年开始, 随和皓哥相见恨晚, 但是我能知耻后勇, 做一只终生学习的耗子, 看十年之后, 我能不能望你的项背","like_count":1,"aid":8136},{"had_liked":false,"product_id":100002201,"comment_is_top":false,"id":222040,"user_header":"https://static001.geekbang.org/account/avatar/00/16/d4/98/29004364.jpg","comment_ctime":1590662150,"can_delete":false,"user_name":"无极","product_type":"c1","replies":null,"uid":1496216,"ucode":"7A933844C9C742","score":1590662150611435,"comment_content":"除了对海量精髓知识的收获，更多的是满满的感动，感谢耗叔，我爱你","like_count":0,"aid":41118}],"page":{"more":true}},"error":{},"extra":{"cost":0.07215889,"request-id":"877c8a9655dea2b2e51c6b4149edd032@2@time"}}
        ]
    },
    {
        "id":100006601,
        "comments": [{"code":0,"data":{"list":[{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":229936,"user_header":"https://static001.geekbang.org/account/avatar/00/1f/35/76/dbab2ce0.jpg","comment_ctime":1593220925,"can_delete":false,"user_name":"wudy","product_type":"c1","replies":[{"ctime":1593516075,"user_name_real":"华仔","uid":1098920,"id":85270,"content":"总结挺好的","utype":1,"comment_id":229936,"user_name":"作者回复"}],"uid":2045302,"ucode":"6E6FDA75B3885A","score":1593220925508364,"comment_content":"框架偏技术，就像作者所说的是一种开发规范，是一种开发思路，应用于系统或子系统中，使得开发人员能快速设计出程序编写的代码组织结构；而架构相对偏业务一点，是针对业务需求，分解整个系统，梳理出数据流转逻辑，有哪些子系统、子模块、组件组成，他们之间的相互关系是怎么样的，需要更多的考虑未来需求的变化，考虑系统的可扩展性，可靠性，容错性等。","like_count":0,"aid":6458},{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":229879,"user_header":"https://static001.geekbang.org/account/avatar/00/1e/39/23/a8a23268.jpg","comment_ctime":1593173402,"can_delete":false,"user_name":"一飞冲天","product_type":"c1","replies":null,"uid":1980707,"ucode":"14CB54F27C4DD4","score":1593173402322503,"comment_content":"古往今来，许多科学家想要找一个万能公式来真正解开世界的真相也就是银弹，但是迄今为止，也没有人能找到，一种世界的物理真理可能在某种世界就失效了，这和软件设计情景很类似，一种很好软件设计思想可能只适合特定的业务场景，它是不可能适用于所有的业务场景的，所以一定要根据现有的业务进行软件设计，并且要适应业务的变化！","like_count":0,"aid":6463},{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":219730,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK1wZ0Hian78KbhhojtyJwqmlc3jCG5p0cGjl25dhY2ymD3K2ibwASLicb9vBYFwuG5icNTjRq73D7NHg/132","comment_ctime":1590071429,"can_delete":false,"user_name":"CL","product_type":"c1","replies":[{"ctime":1590640627,"user_name_real":"华仔","uid":1098920,"id":81808,"content":"谢谢你的评价，加油👍✊","utype":1,"comment_id":219730,"user_name":"作者回复"}],"uid":1703267,"ucode":"7792DF096B9474","score":1590071429811543,"comment_content":"讲得太好了，而且你的这个优先级原则是普适的，不仅适合架构选择，也适合各种解决方案和商务决策。文中的例子太好了，非常生动。读后收获巨大，非常感谢作者的付出","like_count":0,"aid":7832},{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":213502,"user_header":"https://static001.geekbang.org/account/avatar/00/18/9c/6e/01b4d5d2.jpg","comment_ctime":1588434981,"can_delete":false,"user_name":"liupan","product_type":"c1","replies":[{"ctime":1588463781,"user_name_real":"华仔","uid":1098920,"id":79159,"content":"这个问题这里回复不了详细的哦，简单来说就是不同的设计模式是为了解决不同的变化","utype":1,"comment_id":213502,"user_name":"作者回复"}],"uid":1612910,"ucode":"C6C7C48BCCAE12","score":1588434981541083,"comment_content":"策略模式、代理模式、模板模式与装饰者模式的差异在哪？目前设计感觉这几种都沾边了，比如一个任务进来，先执行1，再执行2最后执行3;不同的场景1-2-3的实现可能相同可能不同，那么用多态来封装这些差异，相同的应用通用点，不同的个性化就增加类来实现，业务场景进来会进不同的策略，来区分是否执行下一步，都会先执行到代理类，再转到真正的实现类，所以感觉用了多个设计模式","like_count":0,"aid":6899},{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":213274,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_ctime":1588348151,"can_delete":false,"user_name":"escray","product_type":"c1","replies":[{"ctime":1588464169,"user_name_real":"华仔","uid":1098920,"id":79160,"content":"大量缓存同时到期基本不会出现，因为缓存的key很多，每个key访问是随机的，每个key的有效期也是不同的，除非缓存服务器故障，或者程序出bug，例如某个死循环写入大量缓存，导致大量缓存被踢","utype":1,"comment_id":213274,"user_name":"作者回复"}],"uid":1020525,"ucode":"1F4204930E47C4","score":1588348151166496,"comment_content":"本来是看在《数据结构和算法之美》看一致性哈希，然后看到了雪崩效应，然后找到缓存雪崩，然后找到了这里。\n\n我对于缓存雪崩 Cache avalanche的定义有一点疑问，感觉似乎更像是缓存击穿 Cache breakdown，当然这两个的定义本来就有相似的地方。缓存击穿更多的强调大量缓存同时过期，而缓存雪崩在缓存过期的基础上，又加上了缓存服务器宕机。\n\n就好比，一台缓存服务器宕机，然后导致其他的缓存服务器压力变大，进而影响整个缓存系统。就好像是雪崩时的第一片掉落的雪花。\n\n不过，定义本身并不重要，主要还是对于场景的描述和解决方案。\n\n有意思的是，似乎在维基百科上并没有 Cache avalanche, Cache breakdown, Cache penetration 的定义。","like_count":0,"aid":8640},{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":208850,"user_header":"https://static001.geekbang.org/account/avatar/00/16/22/d7/d166f764.jpg","comment_ctime":1587451211,"can_delete":false,"user_name":"付锐涛","product_type":"c1","replies":[{"ctime":1588162894,"user_name_real":"华仔","uid":1098920,"id":79014,"content":"其实我觉得应该引入vue😃","utype":1,"comment_id":208850,"user_name":"作者回复"}],"uid":1450711,"ucode":"F5BF0571596C4B","score":1587451211844520,"comment_content":"说一下我们公司的业务管理系统，有一个业务大表单（10个子页面组装而成，使用easyui+js实现），不同的业务场景，这个大表单的元素需要动态变化（可见、必填、校验规则）。\n以前的做法是大范围变化全部复制一套，小范围变化使用JavaScript做动态控制，随着业务的演进这样的表单复制了5套，对应的js文件也复制了5套并做个性化修改，当需要维护表单的时候经常要5套一起修改，经常出现错改或者漏改的情况。\n这个表单是核心业务表单，随着业务的发展修改频率非常高，所以想着能不能做成可配置的，刚开始想到以下两个方案：\n1.引入vue\n2.在后台生成表单html\n由于团队内都是后端程序员，所以vue的学习成本导致被放弃。使用第二套方案相当于要开发一套表单生成系统，而且要保证前端样式不变，难度比vue还高。\n最后结合实际情况，区分出表单中可变性（可见、必填、校验规则）和不可变性（表单布局），将表单布局整理出一套模板，再在数据库中存储每个元素的可变属性，页面渲染成功之后动态调整可变性。\n\n由于履历原因，一直没有机会参与到架构搭建和架构重构这种级别的改造中，所做的重构也都是功能级别的，正在探索架构师的玩法。","like_count":0,"aid":12953},{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":199004,"user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/30/bb4bfe9d.jpg","comment_ctime":1585475887,"can_delete":false,"user_name":"lyonger","product_type":"c1","replies":[{"ctime":1585539328,"user_name_real":"华仔","uid":1098920,"id":74866,"content":"专栏介绍还是关注专业的东西会好点😂","utype":1,"comment_id":199004,"user_name":"作者回复"}],"uid":1313840,"ucode":"E89A75DADEA2A1","score":1585475887424758,"comment_content":"好赞啊，这篇文章在专栏的介绍里应该置顶和提及。给华哥点赞👍","like_count":2,"aid":41397},{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":196829,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/b0/ef/2c430346.jpg","comment_ctime":1585316261,"can_delete":false,"user_name":"胡青","product_type":"c1","replies":[{"ctime":1585539722,"user_name_real":"华仔","uid":1098920,"id":74875,"content":"加油👍","utype":1,"comment_id":196829,"user_name":"作者回复"}],"uid":1028335,"ucode":"03E05B93F49D9F","score":1585316261519280,"comment_content":"极客时间第一门学完的课程，在这里要感谢老师","like_count":0,"aid":13419},{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":195967,"user_header":"https://static001.geekbang.org/account/avatar/00/10/78/db/825d3b7c.jpg","comment_ctime":1585226528,"can_delete":false,"user_name":"Alex Liu","product_type":"c1","replies":[{"ctime":1585539802,"user_name_real":"华仔","uid":1098920,"id":74877,"content":"加油","utype":1,"comment_id":195967,"user_name":"作者回复"}],"uid":1079515,"ucode":"68D1F6F9E7F05C","score":1585226528590385,"comment_content":"才看到，真偶像","like_count":0,"aid":41397},{"had_liked":false,"product_id":100006601,"comment_is_top":false,"id":195651,"user_header":"https://static001.geekbang.org/account/avatar/00/19/b2/91/fbc34225.jpg","comment_ctime":1585209382,"can_delete":false,"user_name":"zero","product_type":"c1","replies":[{"ctime":1585539956,"user_name_real":"华仔","uid":1098920,"id":74879,"content":"加油","utype":1,"comment_id":195651,"user_name":"作者回复"}],"uid":1684113,"ucode":"27019747CA63FF","score":1585209382642057,"comment_content":"阅过留名，感谢华哥的分享，然我对架构师这个职业有了深刻的认识，也拔高了我的眼界，不在局限于某一个细节，有一种一览众山小的感觉，接下来就是在细分领域的不断学习总结","like_count":0,"aid":13419}],"page":{"more":true}},"error":{},"extra":{"cost":0.070327056,"request-id":"98eb9c71d6d5c96c50a20b315f790450@2@time"}}]
    },
    {
        "id":100007101,
        "comments": [{"code":0,"data":{"list":[{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":192463,"user_header":"","comment_ctime":1584852497,"can_delete":false,"user_name":"Geek_993581","product_type":"c1","replies":null,"uid":1898294,"ucode":"234BBDADBEF8C0","score":1584852497412635,"comment_content":"光听老师的发刊词就已热血沸腾了，网络技术没人可置身事外。 期待后面的课程。","like_count":0,"aid":7398},{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":190689,"user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/f9/b946719a.jpg","comment_ctime":1584683131,"can_delete":false,"user_name":"King-ZJ","product_type":"c1","replies":null,"uid":1915385,"ucode":"7448A4BBB5A118","score":1584683131782669,"comment_content":"这节是我影响最大的是，在学习网络协议的时候一定要记得某一些原则，不能乱套用和乱按寨扎营，就说会原点了：要有自己的知识体系和框架，这样你在学习东西的时候，就知道放在哪里，同时你在思考一件事情时，你根据你的体系和框架来思考和判断。回到具体知识点，拆解一个网络协议，一步一个脚印，扎扎实实地学会、学透。","like_count":0,"aid":8015},{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":176778,"user_header":"https://static001.geekbang.org/account/avatar/00/13/30/4a/8be4b8d3.jpg","comment_ctime":1581165008,"can_delete":false,"user_name":"Gospel","product_type":"c1","replies":null,"uid":1257546,"ucode":"C399412DF3FFE1","score":1581165008144327,"comment_content":"写的真好，之前学了网络，文章每个词都认识。也能说出一些概念。但是头一次串联起来所有的知识，感觉获得了新的理解。","like_count":0,"aid":7581},{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":162207,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/3d/9ff6988e.jpg","comment_ctime":1576477405,"can_delete":false,"user_name":"远恒之义","product_type":"c1","replies":null,"uid":1020989,"ucode":"C0CB54C7AE9EB0","score":1576477405497208,"comment_content":"开篇知识总结：\n1.要成为技术大牛，做大系统，必须搞定网络，网络协议是重中之重。\n2.掌握最核心本质的知识，不被滚滚而来的新技术淘汰，必须关注大学计算机核心课程：计算机组成、操作系统、编译原理、计算机网络、网络协议、算法与数据结构、数据库、汇编语言。\n3.学习新知识的过程与方法：由点及面的系统学习知识点、把知识点关联和串联起来，加深理解和思考、学以致用，在实践中巩固知识。","like_count":0,"aid":7398},{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":155871,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/38/ba6a106f.jpg","comment_ctime":1574770802,"can_delete":false,"user_name":"Phoenix","product_type":"c1","replies":null,"uid":1005368,"ucode":"C51BE4C948755B","score":1574770802736612,"comment_content":"作为非科班出身的程序员，我居然看懂了，可见老师的功力深厚，感谢老师","like_count":0,"aid":8386},{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":151463,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/24/300864af.jpg","comment_ctime":1573725663,"can_delete":false,"user_name":"pimpl","product_type":"c1","replies":null,"uid":1006116,"ucode":"AB5302A7B0FBDC","score":1573725663525484,"comment_content":"网络协议博大精深，听了老师的讲解，豁然开朗。","like_count":0,"aid":10534},{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":150167,"user_header":"https://static001.geekbang.org/account/avatar/00/15/f5/8e/f2a5539a.jpg","comment_ctime":1573471861,"can_delete":false,"user_name":"潜水","product_type":"c1","replies":null,"uid":1439118,"ucode":"5FA3F6687E2104","score":1573471861154413,"comment_content":"还是写个完结感言。\n从完全的小白学到很多。\n2018年5月，差不多刚出的时候买的课，现在是2019-11-11。过了一年呢。\n从当时在公司每天6点起来学习加深技术，到后来对生活感到绝望，离职打游戏，看小说，最后又回来重新振作精神继续技术之路。\n生活不易，能够满足自己的好奇心并且赚到钱并且做点什么，更是不容易。且行且珍惜。","like_count":0,"aid":14553},{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":148776,"user_header":"https://static001.geekbang.org/account/avatar/00/11/93/cc/dfe92ee1.jpg","comment_ctime":1573085950,"can_delete":false,"user_name":"宋桓公","product_type":"c1","replies":null,"uid":1151948,"ucode":"04235C2B87AB0E","score":1573085950911211,"comment_content":"评论也是个宝库呀，这个栏目的听众质量高啊","like_count":2,"aid":8386},{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":144971,"user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_ctime":1572145147,"can_delete":false,"user_name":"胖胖胖","product_type":"c1","replies":null,"uid":1240126,"ucode":"32B34AF579C91C","score":1572145147526331,"comment_content":"非科班，控制出身，网络方面0基础。研一上课，导研二终于有时间来看了，每一节看的都很辛苦，第一遍都听得头晕，但看了两三遍就慢慢能看懂了，到第四遍左右就会发现老师的行文逻辑确实很清晰nice，对应着在看计算机的那本教材，本科选修的时候看不懂，现在对应的部分，对着书和老师的课看就感觉理解的还挺透彻的（自我感觉），确实有用。感谢老师","like_count":0,"aid":8445},{"had_liked":false,"product_id":100007101,"comment_is_top":false,"id":140142,"user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/f9/39492855.jpg","comment_ctime":1570839753,"can_delete":false,"user_name":"阿阳","product_type":"c1","replies":null,"uid":1165817,"ucode":"20A35FB86B1C5C","score":1570839753788007,"comment_content":"太棒了，这么多年，第一次对https的协商过程有明确的认识。","like_count":0,"aid":9492}],"page":{"more":true}},"error":{},"extra":{"cost":0.031344774,"request-id":"2be999f26617d56b96336c4e0762e917@2@time"}}]
    },
    {
        "id":100023201,
        "comments": [{"code":0,"data":{"list":[{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":203662,"user_header":"https://static001.geekbang.org/account/avatar/00/15/00/23/e1f36fb9.jpg","comment_ctime":1586249514,"can_delete":false,"user_name":"后知后觉","product_type":"c1","replies":null,"uid":1376291,"ucode":"6B6A089BFE630F","score":1586249514700816,"comment_content":"考研目录，着重挑了三篇看，这是其中之一。有了点启发，感觉欠缺的好多，什么时候才是个头啊。学海无涯，吾生有崖，怠矣","like_count":0,"aid":106193},{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":203567,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/s0bx4WXQNkAJ3c3map0g6dlt3sKDgTtN7Ria96YoufjQcVVI8Shv5CN1jnK1ZTImNnlPcibRqvyiaUuhpIvV1TpnQ/132","comment_ctime":1586233937,"can_delete":false,"user_name":"wingsico","product_type":"c1","replies":null,"uid":1126631,"ucode":"A91CB7B0497708","score":1586233937142913,"comment_content":"在JS中，函数其实就是闭包，不管该函数内部是否使用外部变量，它都是一个闭包。如闭包定义的那样，由环境和表达式组成，作为js函数，环境为词法环境，而表达式就是函数本身。而词法环境是执行上下文的一部分，执行上下文包括 this 绑定, 词法环境和变量环境。词法环境是随着执行上下文一起创建的，在函数\u0026#47;脚本\u0026#47;eval执行时创建。\n\n理解闭包，首先需要理解闭包是什么类型的东西，闭包实际上指的是函数，搞清楚问题的对象究竟是谁，而很多人会把环境\u0026#47;作用域等其他的东西当做闭包，是对闭包的概念类型的错误理解。那么知道了闭包是函数，那么闭包应该是什么样的函数呢？也就是含有环境的函数，很明显，在js中，任何一个函数都有着自己的环境，这个环境让我们可以去找到定义的变量内部的this、外部作用域。\n\n很多人认为，要让一个函数能去访问某个应该被回收的内存空间，但由于函数存在对该内存空间的变量的引用而不可回收，这样才形成了闭包。那么试问一下，这里你到底是把这个内存空间当做闭包呢？还是引用这块内存空间的函数当闭包呢？假如是前者，则和把环境当闭包的人犯了同样的错误，假如是后者，现在的这个函数实际上和你定义的普通函数本质上没有区别，都含有自己的环境，只不过这个函数的环境多了一些，但本质没有区别。理解了这点，你才能从上面的错误理解中解脱出来。","like_count":10,"aid":83302},{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":196076,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLAmpDkIxlMjoRlVbicOmdAmrdr9bnfsCkcCPzo53ibzMeSt8ygtJXQiaTfU4rSe9qHJkOAQcUOQj9s9A/132","comment_ctime":1585233780,"can_delete":false,"user_name":"Geek_ab9b5f","product_type":"c1","replies":null,"uid":1778076,"ucode":"080FAE08B0128A","score":1585233780080429,"comment_content":"收益匪浅，报了winter老师的课","like_count":0,"aid":94156},{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":194989,"user_header":"","comment_ctime":1585125728,"can_delete":false,"user_name":"郭郭","product_type":"c1","replies":null,"uid":1388492,"ucode":"71AA578CA07787","score":1585125728448995,"comment_content":"非常完美地弥补了之前学习html的知识盲区❤","like_count":0,"aid":92227},{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":194208,"user_header":"https://static001.geekbang.org/account/avatar/00/10/76/f1/3f1f3665.jpg","comment_ctime":1585037647,"can_delete":false,"user_name":"C梦","product_type":"c1","replies":null,"uid":1079025,"ucode":"77795A69A8E0C5","score":1585037647031335,"comment_content":"作为一个好多年的后端，在一家大公司也接触不了什么技术，现在在自学前段，学的乱七八糟，希望通过课程重学前端","like_count":1,"aid":77804},{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":193136,"user_header":"https://static001.geekbang.org/account/avatar/00/17/7b/ac/13eaecf5.jpg","comment_ctime":1584884600,"can_delete":false,"user_name":"樊琳琪","product_type":"c1","replies":null,"uid":1538988,"ucode":"990C0F8027FC5E","score":1584884600052742,"comment_content":"听第二遍感觉有新的收货","like_count":0,"aid":79539},{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":193057,"user_header":"https://static001.geekbang.org/account/avatar/00/14/f7/2f/10cbed82.jpg","comment_ctime":1584883231,"can_delete":false,"user_name":"pcxpccccx_","product_type":"c1","replies":null,"uid":1373999,"ucode":"CCCF6C13279BB7","score":1584883231028025,"comment_content":"语义话原来这么重要学到了","like_count":0,"aid":78168},{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":190417,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoMlOBZg2HYWgCiag26lgGJQEAxYk2BzcGRLWENkylrmNL7AOyk55IZHoAKv0K7oNhsy5L62eulOhw/132","comment_ctime":1584643709,"can_delete":false,"user_name":"小童","product_type":"c1","replies":null,"uid":1763395,"ucode":"300444B520E79D","score":1584643709867125,"comment_content":"居然有最小进度，长见识了。","like_count":0,"aid":78884},{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":189258,"user_header":"https://static001.geekbang.org/account/avatar/00/11/f5/ad/2f7d5e50.jpg","comment_ctime":1584493843,"can_delete":false,"user_name":"小玲子ida","product_type":"c1","replies":null,"uid":1177005,"ucode":"A447EF847D375E","score":1584493843975518,"comment_content":"老师说到了点子上，做了一年的前端，为了赶项目学习了两个月就开始开干，边做边学，业务不复杂，平时也没有技术积累，所以现在的水平还是处于初级阶段，遇到难题就会找半天的解决方案！觉得自己这样下去真不行，没有自己的知识体系，盲学，希望学完老师的课，能有一套自己的知识体系和重新认识前端！","like_count":0,"aid":77345},{"had_liked":false,"product_id":100023201,"comment_is_top":false,"id":188157,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/e0/acbca24e.jpg","comment_ctime":1584325450,"can_delete":false,"user_name":"108度","product_type":"c1","replies":null,"uid":1015008,"ucode":"085C8A8278C7D5","score":1584325450552049,"comment_content":"前端，我来了，跟winter老师学，靠谱","like_count":0,"aid":77345}],"page":{"more":true}},"error":{},"extra":{"cost":0.033749195,"request-id":"a8b8b73f8d11b079f93a1418f7328eca@2@time"}}]
    },
    {
        "id":100015201,
        "comments": [{"code":0,"data":{"list":[{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":236595,"user_header":"https://static001.geekbang.org/account/avatar/00/18/32/c2/8c1a2b00.jpg","comment_ctime":1595473844,"can_delete":false,"user_name":"头发乱了","product_type":"c1","replies":null,"uid":1585858,"ucode":"DA940109725AE5","score":1595473844328373,"comment_content":"听老师的讲解真是太过瘾了！！","like_count":0,"aid":67775},{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":233162,"user_header":"https://static001.geekbang.org/account/avatar/00/1f/69/1b/63cc6222.jpg","comment_ctime":1594254222,"can_delete":false,"user_name":"包星","product_type":"c1","replies":null,"uid":2058523,"ucode":"33D68E89B8C33F","score":1594254222597931,"comment_content":"听的我热血澎湃，期待以后的课程。","like_count":0,"aid":14252},{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":231077,"user_header":"https://static001.geekbang.org/account/avatar/00/11/07/30/815820d4.jpg","comment_ctime":1593576134,"can_delete":false,"user_name":"三目童子","product_type":"c1","replies":null,"uid":1115952,"ucode":"6BCE9E6166499D","score":1593576134125073,"comment_content":"刚买课，这段故事就值十块钱的😁","like_count":3,"aid":14406},{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":209262,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_ctime":1587525726,"can_delete":false,"user_name":"张三","product_type":"c1","replies":null,"uid":1004092,"ucode":"1155528FAE1546","score":1587525726780098,"comment_content":"精彩！老师不但教知其然，而且完全详细的讲解所以然。谢谢。学习了。","like_count":1,"aid":67351},{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":204691,"user_header":"https://static001.geekbang.org/account/avatar/00/1d/64/21/9e743711.jpg","comment_ctime":1586442791,"can_delete":false,"user_name":"正宗老菜鸟","product_type":"c1","replies":null,"uid":1926177,"ucode":"F54623D3A2DC5C","score":1586442791968452,"comment_content":"真的停不下来，老师的讲解真的是每个字都不多余。思路清晰，逻辑严谨。把如此错综复杂的架构，讲的明明白白，这是我极客的一个购买课程，有幸遇到如此好的老师，千值万值。","like_count":0,"aid":40583},{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":201700,"user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcFZomZ7SYnZibAVtGTwUfuiaErLBasHeQFwYBnMWuzHPMSjRhCFlkved6gSOUxXzHIrqM7Xskq08g/132","comment_ctime":1585821337,"can_delete":false,"user_name":"金越","product_type":"c1","replies":null,"uid":1878115,"ucode":"5F456EF696CDF0","score":1585821337519964,"comment_content":"饶有趣味的讲解 深入浅出的剖析 容器小白的福利课程喔","like_count":0,"aid":14254},{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":189448,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/e3/abb7bfe3.jpg","comment_ctime":1584517288,"can_delete":false,"user_name":"Neo","product_type":"c1","replies":null,"uid":1004003,"ucode":"DA1C960B5F23DC","score":1584517288336896,"comment_content":"在极客时间总共买了19个专栏了，可以不夸张的说，张老师的《深入剖析kubernetes》是最好的没有之一。内容循序渐进，以发问的方式由浅入深，很有代入感。极客时间啥时候开个赞赏功能，我要给老师加鸡腿，哈哈哈。","like_count":1,"aid":23132},{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":184710,"user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/4a/b722cbbc.jpg","comment_ctime":1583389295,"can_delete":false,"user_name":"Xiao淩求个好运气","product_type":"c1","replies":[{"ctime":1584423339,"user_name_real":"Geek_6ef93d","uid":1218095,"id":72838,"content":"感谢支持","utype":1,"comment_id":184710,"user_name":"作者回复"}],"uid":1157450,"ucode":"63FAACBF305199","score":1583389295104095,"comment_content":"就这一篇文章，配得上我为整个专栏付费，真是醍醐灌顶","like_count":1,"aid":40092},{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":171298,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/71/9fd7cd7a.jpg","comment_ctime":1578896557,"can_delete":false,"user_name":"Daniel","product_type":"c1","replies":null,"uid":1020529,"ucode":"282E09B3146501","score":1578896557563410,"comment_content":"我觉得 讲的太好了，跟着代码过了一下，现在很多知识点我了解的都很透彻。","like_count":0,"aid":14653},{"had_liked":false,"product_id":100015201,"comment_is_top":false,"id":133310,"user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/e1/f5893f24.jpg","comment_ctime":1568511455,"can_delete":false,"user_name":"黑将军","product_type":"c1","replies":null,"uid":1154529,"ucode":"4AD51EB14A77A0","score":1568511455693562,"comment_content":"写的真好，读起来像在看小说一样，不是枯燥的docker历史","like_count":0,"aid":14406}],"page":{"more":true}},"error":{},"extra":{"cost":0.085030582,"request-id":"6cecde532af20e4808632e62ee8b67ba@2@time"}}]
    },
    {
        "id":100010301,
        "comments": [{"code":0,"data":{"list":[{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":220088,"user_header":"","comment_ctime":1590152320,"can_delete":false,"user_name":"向南","product_type":"c1","replies":null,"uid":2007213,"ucode":"F4D2AB9D5DDFD9","score":1590152320568315,"comment_content":"循序渐进，讲的非常好，值得反复看","like_count":0,"aid":13091},{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":146702,"user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_ctime":1572611986,"can_delete":false,"user_name":"随心而至","product_type":"c1","replies":[{"ctime":1575366862,"user_name_real":"郑雨迪","uid":1176688,"id":60617,"content":"多谢支持！","utype":1,"comment_id":146702,"user_name":"作者回复"}],"uid":1097836,"ucode":"31866865255101","score":1572611986876135,"comment_content":"感谢郑老师\n\n1.实践性强\n这是我目前订阅的专栏里面写留言最多的，以前大学时看周志明的书，总觉得很难动手验证，或许是自己经验能力都还不够。现在订阅这个专栏，每次都能跟着老师的实战实际的动手，实际地体会每个知识点。这样的学习也是我最喜欢的方式，每次都能边看边思考边动手验证，一些思想概念等看不着莫不见的东西通过代码，通过工具，就可以显现在自己眼前，这样理解之后的在记忆，更加持久深入。即便忘记了，也可以很快捡起来。\n2.有体系，有脉络\n老师先讲JVM的基本原理，再讲高效编译，代码优化，以及畅想未来的GraalVM。 让我对JVM的了解深入了很多。\n3.有启发，开拓视野\n原来我不知道如何去验证voaltile， synchronzied的实现方式，try-catch-finally的实现方式（还有很多），其实都是可以通过字节码，机器码，JVM源码来验证的。另外JNI， Java Agent也都开拓了我的眼界，明白native的前世今生，明白了AOP的实现方式，\n4.学习需要有体系\n计算机组成原理，操作系统，编译原理，计网，数据结构与算法都是一些通用的计算机科学知识。聪明的计算机科学家会借鉴已有的最有效的解决方案来解决自己遇到的问题，只有了解了这些最底层计算机科学知识，自己才可以走的更远。\n道阻且长，继续加油。\n\n再次感谢郑老师","like_count":2,"aid":41800},{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":144720,"user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_ctime":1572009165,"can_delete":false,"user_name":"随心而至","product_type":"c1","replies":[{"ctime":1578930665,"user_name_real":"郑雨迪","uid":1176688,"id":66456,"content":"对的，许多intrinsics 都会依赖特殊的CPU指令来优化执行效率的。\n\n说个趣闻，Intel曾经向OpenJDK提交了一大堆浮点数算法作为java.lang.Math中部分方法的intrinsic，比如sin cos这些，除了他们没人看的懂。结果在某些情况下算出来的结果是错的。。后来他们又提交了一堆更正过的天书代码，希望是对的吧，哈哈","utype":1,"comment_id":144720,"user_name":"作者回复"}],"uid":1097836,"ucode":"31866865255101","score":1572009165543172,"comment_content":"赞，之前学习了深入理解计算机原理这门课，再联系这一节就知道intrinsic想做什么了。\nJVM 自身不是跨平台的，Windows，Linux都有各自的安装包，也就是JVM帮我们做了不同操作系统及底层体系结构的兼容；但是针对每一个具体的CPU，其自身提供的指令，寄存器，以及SIMD等优化机制并没有得到利用，而intrinsic的产生正是为了利用这些。\n个人理解，有不对之处，请老师和各位同学指出。","like_count":5,"aid":18046},{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":45984,"user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/91/a9b51d4e.jpg","comment_ctime":1543828288,"can_delete":false,"user_name":"Desire","product_type":"c1","replies":[{"ctime":1543938393,"user_name_real":"郑雨迪","uid":1176688,"id":16644,"content":"多谢支持！","utype":1,"comment_id":45984,"user_name":"作者回复"}],"uid":1138577,"ucode":"7991CBB5EFD004","score":1543828288084283,"comment_content":"感谢，老师这么长时间，讲学。让我对jvm有所了解。还需要对jvm深入开展。","like_count":2,"aid":41800},{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":33724,"user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","comment_ctime":1539863992,"can_delete":false,"user_name":"慎独","product_type":"c1","replies":[{"ctime":1540821639,"user_name_real":"郑雨迪","uid":1176688,"id":12758,"content":"对的！","utype":1,"comment_id":33724,"user_name":"作者回复"}],"uid":1236320,"ucode":"68029ADA76AA5A","score":1539863992753561,"comment_content":"1.虚拟机必须知道（加载）有这个类，才能创建这个类的数组（容器），但是这个类并没有被使用到（没有达到初始化的条件），所以不会初始化。\n2.新建数组的时候并不是要使用这个类（只是定义了放这个类的容器），所以不会被链接，调用getInstance(false)的时候约等于告诉虚拟机，我要使用这个类了，你把这个类造好（链接），然后把static修饰的字符赋予变量（初始化）。\n老师看看理解对不对，指点一下。","like_count":52,"aid":11523},{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":33616,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/cd/abb7bfe3.jpg","comment_ctime":1539836711,"can_delete":false,"user_name":"陈浩","product_type":"c1","replies":[{"ctime":1539955045,"user_name_real":"郑雨迪","uid":1176688,"id":12162,"content":"多谢支持！","utype":1,"comment_id":33616,"user_name":"作者回复"}],"uid":1018829,"ucode":"49167A011CB666","score":1539836711693871,"comment_content":"这是我读过最硬核的技术专栏，感谢","like_count":3,"aid":41800},{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":32427,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/e3/abb7bfe3.jpg","comment_ctime":1539569095,"can_delete":false,"user_name":"bradsun","product_type":"c1","replies":[{"ctime":1539609657,"user_name_real":"郑雨迪","uid":1176688,"id":11860,"content":"多谢支持！","utype":1,"comment_id":32427,"user_name":"作者回复"}],"uid":1024227,"ucode":"E0C8E80B18F320","score":1539569095648483,"comment_content":"这个课程对学习JVM提供了很好的入口。十分感谢！","like_count":0,"aid":41800},{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":32350,"user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/c4/be9f44bb.jpg","comment_ctime":1539540646,"can_delete":false,"user_name":"阿武","product_type":"c1","replies":[{"ctime":1539613975,"user_name_real":"郑雨迪","uid":1176688,"id":11865,"content":"多谢支持！","utype":1,"comment_id":32350,"user_name":"作者回复"}],"uid":1234116,"ucode":"833B4B27FF7F55","score":1539540646046725,"comment_content":"感谢作者这么细心的专栏，虽然我因为技术资历较浅，还没研习虚拟机。但看了前几篇文章，感觉作者很用心，等算法和Java开发能力上升后，一定好好研习大大的文章。:-)","like_count":1,"aid":41800},{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":31828,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/2f/b7a3625e.jpg","comment_ctime":1539307625,"can_delete":false,"user_name":"Len","product_type":"c1","replies":[{"ctime":1539333283,"user_name_real":"郑雨迪","uid":1176688,"id":11545,"content":"赞想法！已经有这种做法，但同时需要承担profile不能反映当前执行状态的风险。可以了解一下Alibaba的JWarmup。","utype":1,"comment_id":31828,"user_name":"作者回复"}],"uid":1022767,"ucode":"53C623CE17973F","score":1539307625094835,"comment_content":"我们可不可以把 profile 和编译的机器码保存到磁盘，在代码和运行平台不变的情况下，下次启动（或部署多实例）的时候直接装载这部分数据？这算作是一种系统预热的可行性方案吗？","like_count":10,"aid":41245},{"had_liked":false,"product_id":100010301,"comment_is_top":false,"id":31530,"user_header":"https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg","comment_ctime":1539222863,"can_delete":false,"user_name":"life is short, enjoy more.","product_type":"c1","replies":[{"ctime":1539359532,"user_name_real":"郑雨迪","uid":1176688,"id":11577,"content":"赞总结！","utype":1,"comment_id":31530,"user_name":"作者回复"}],"uid":1074805,"ucode":"3B5F37D30790A7","score":1539222863671308,"comment_content":"对象头\n\n每个对象都有一个对象头，对象头包括两部分，标记信息和类型指针。\n\n标记信息包括哈希值，锁信息，GC信息。类型指针指向这个对象的class。\n\n两个信息分别占用8个字节，所以每个对象的额外内存为16个字节。很消耗内存。\n\n压缩指针\n\n为了减少类型指针的内存占用，将64位指针压缩至32位，进而节约内存。之前64位寻址，寻的是字节。现在32位寻址，寻的是变量。再加上内存对齐(补齐为8的倍数)，可以每次寻变量都以一定的规则寻找，并且一定可以找得到。\n\n内存对齐\n\n内存对齐的另一个好处是，使得CPU缓存行可以更好的实施。保证每个变量都只出现在一条缓存行中，不会出现跨行缓存。提高程序的执行效率。\n\n字段重排序\n\n其实就是更好的执行内存对齐标准，会调整字段在内存中的分布，达到方便寻址和节省空间的目的。\n\n虚共享\n\n当两个线程分别访问一个对象中的不同volatile字段，理论上是不涉及变量共享和同步要求的。但是如果两个volatile字段处于同一个CPU缓存行中，对其中一个volatile字段的写操作，会导致整个缓存行的写回和读取操作，进而影响到了另一个volatile变量，也就是实际上的共享问题。\n\n@Contented注解\n\n该注解就是用来解决虚共享问题的，被该注解标识的变量，会独占一个CPU缓存行。但也因此浪费了大量的内存空间。\n\n","like_count":39,"aid":13081}],"page":{"more":true}},"error":{},"extra":{"cost":0.099173201,"request-id":"dd362681eeb60c8759493f3ba7ac60a3@2@time"}}]
    },
    {
        "id":100023501,
        "comments": [{"code":0,"data":{"list":[{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":202314,"user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicaA0KqZVXNLAAcXW7avrl3ZcBmuGt8gibb9MLgfianDqbBk35U87UcAF9wNnusibGQ4JoEYowXsx3w/132","comment_ctime":1585966274,"can_delete":false,"user_name":"苏健","product_type":"c3","replies":[{"ctime":1586008254,"user_name_real":"丁雪丰","uid":1008460,"id":75680,"content":"这是Hibernate的注解，可以加在属性上，也可以写在Getter方法上，如果想深入理解可以查阅一下Hibernate的文档。如果我把注解写在Getter方法上，你是否可以理解Getter方法是public的，子类是能继承到的，对于Java POJO而言，getter\u0026#47;setter才是让别人看到属性的地方，而不是内部的field。不知道这么举例说明你能否明白。","utype":1,"comment_id":202314,"user_name":"作者回复"}],"uid":1927420,"ucode":"4A628A2BAF5B8D","score":1585966274761384,"comment_content":"BaseEntity虽然有@MapperSuperclass 注解，但是id等属性都是私有的，为何子类还是能够继承","like_count":0,"aid":82882},{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":199209,"user_header":"https://static001.geekbang.org/account/avatar/00/15/4b/e9/bbccf643.jpg","comment_ctime":1585482458,"can_delete":false,"user_name":"sanmao","product_type":"c3","replies":[{"ctime":1586005782,"user_name_real":"丁雪丰","uid":1008460,"id":75673,"content":"只是不同的方式而已，其实我也不太建议用GIT，如果可以的话，用Apollo这种专门的配置中心会更好一些。你们使用DB+缓存，要注意解决配置项实时推送生效，本地缓存更新等等的点，在开源方案上定制会更方便点。","utype":1,"comment_id":199209,"user_name":"作者回复"}],"uid":1395689,"ucode":"D695D88677E3D9","score":1585482458755854,"comment_content":"配置中心我在项目里边用的是 mysql + 缓存 通过一个服务暴露的. 这样数据在存储的时候比较方便. 这种基于文件的是方式来配置的优势是什么, 老师~","like_count":1,"aid":95450},{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":197230,"user_header":"https://static001.geekbang.org/account/avatar/00/17/74/e1/623ff8d8.jpg","comment_ctime":1585364274,"can_delete":false,"user_name":"Shane_ミ木","product_type":"c3","replies":[{"ctime":1585397860,"user_name_real":"丁雪丰","uid":1008460,"id":74624,"content":"一般都是根据表结构来生成的，你说的根据SQL应该也只能解决DAO方法，Model还需要根据表结构来。\n以前支付宝的Dalgen就能满足你的需求，结合了表结构和SQL。但开源的工具，我没有太多了解，只接触过完全根据表结构来生成的。","utype":1,"comment_id":197230,"user_name":"作者回复"}],"uid":1537249,"ucode":"01396B247CC8D8","score":1585364274904622,"comment_content":"目前有没有根据sql生成dao层的通用工具？","like_count":1,"aid":83446},{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":195588,"user_header":"https://static001.geekbang.org/account/avatar/00/18/bb/f5/f60a479f.jpg","comment_ctime":1585200448,"can_delete":false,"user_name":"Ht","product_type":"c3","replies":[{"ctime":1585393719,"user_name_real":"丁雪丰","uid":1008460,"id":74613,"content":"Bean是Spring容器中成员的最小组成部分，它也是普通的JavaBean，所以你把它理解为JavaBean也是OK的。但这个Bean未必需要getter\u0026#47;setter，因为Spring的依赖注入方式很多，不一定都是Setter方式，也可以用构造方法，还有注解也可以不用Setter。","utype":1,"comment_id":195588,"user_name":"作者回复"}],"uid":1620981,"ucode":"91E3A107280519","score":1585200448611756,"comment_content":"丁老师问一下，我理解的javaBean是含有getxx setxx的类的说法，你这里说的service层的bean、web层的bean 是什么呢？也是表示有getxx、setxx的类吗 只是处于的位置不同吗","like_count":0,"aid":82478},{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":184734,"user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/ed/f9347e5e.jpg","comment_ctime":1583393171,"can_delete":false,"user_name":"我的腿腿","product_type":"c3","replies":[{"ctime":1583671857,"user_name_real":"DigitalSonic","uid":1008460,"id":71759,"content":"我平时主要用IDEA，STS这个工具没怎么用过，我给你一个大概的排查方向吧，如果你的构建可以成功，也可以在IDE之外运行，那说明不是你的代码的问题。\n至于你说的公司的JAR，是说加在IDE里还是加在工程里的呢？如果是IDE的插件，你去掉它试试。","utype":1,"comment_id":184734,"user_name":"作者回复"}],"uid":1239277,"ucode":"2AAA36A7C3AD75","score":1583393171125634,"comment_content":"我sts工具升级后加载公司的Jar后，不加载可以启动，gradle构建都成功，执行的时候出现错误：无法找到或加载主类，这种问题该怎么排查？网上的方法都不行","like_count":0,"aid":88724},{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":184010,"user_header":"https://static001.geekbang.org/account/avatar/00/10/63/26/8c8be018.jpg","comment_ctime":1583204440,"can_delete":false,"user_name":"莫得办法","product_type":"c3","replies":[{"ctime":1583672077,"user_name_real":"DigitalSonic","uid":1008460,"id":71761,"content":"如果你只有一个DataSource，不要排除DataSourceAutoConfiguration，而是自己定义一个DataSource的Bean，这样SpringBoot就不会帮你配置Bean。然后指定spring.datasource.initialization-mode=always，这样不管是不是内嵌数据库都会执行初始化，我们在课程中有介绍过这个配置。","utype":1,"comment_id":184010,"user_name":"作者回复"}],"uid":1073958,"ucode":"D3E07A4CFD1AAA","score":1583204440309306,"comment_content":"我想问一下，自定义数据源后，如何初始化schema.sql和data.sql，因为自定义排除了DataSourceAutoConfiguration，因此不会走初始化逻辑，并且看源码里面初始化是写死的读取spring.datasource.schema和data属性值。","like_count":0,"aid":80197},{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":182654,"user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/e9/dcc63d8f.jpg","comment_ctime":1582833967,"can_delete":false,"user_name":"怕什么，抱紧我","product_type":"c3","replies":[{"ctime":1583041633,"user_name_real":"DigitalSonic","uid":1008460,"id":70965,"content":"@Cachable注解的使用场景还是比较单一的，根据你的入参等内容，缓存对应的返回。在实际的使用过程中，有很多灵活运用缓存的地方，这时，有个编程式的使用方式，你就能方便很多。","utype":1,"comment_id":182654,"user_name":"作者回复"}],"uid":1318633,"ucode":"CBCEA76E9EF33B","score":1582833967123844,"comment_content":"老师好,我看到后面缓存的章节了,有疑问所以又回到了这里，@Cache既可以用在Controller,也可以用在Service和Dao层,您在留言区也说了redisTemplate，感觉注解的方式更方便啊,能说说两者的区别,或者使用的场景吗？","like_count":0,"aid":83781},{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":181788,"user_header":"https://static001.geekbang.org/account/avatar/00/16/15/2d/8447e8c8.jpg","comment_ctime":1582634508,"can_delete":false,"user_name":"Tunayoyo","product_type":"c3","replies":[{"ctime":1583043107,"user_name_real":"DigitalSonic","uid":1008460,"id":70975,"content":"这个其实和SpringBoot没什么关系，JDBC、MyBatis和Hibernate能做到什么，就能做到什么。一般情况下，都不建议跨库关联，有这种需求，通过编程方式来实现吧，但更多情况下，还是回过头去看看这个需求本身是否合理，或者这些要关联的表是否应该在一个库里，或者是否可以通过数据冗余的方式把它们放到一起。根据你的实际情况去判断吧。","utype":1,"comment_id":181788,"user_name":"作者回复"}],"uid":1447213,"ucode":"E77AFDE575CE04","score":1582634508539793,"comment_content":"老师spring boot里面可以做不同数据库多表关联（inner jion）吗?","like_count":1,"aid":80193},{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":179779,"user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/b2e053a4.jpg","comment_ctime":1582097115,"can_delete":false,"user_name":"KaitoShy","product_type":"c3","replies":[{"ctime":1583045094,"user_name_real":"DigitalSonic","uid":1008460,"id":70998,"content":"不太建议，一般选一种，这样项目也能清晰一些。所以一开始就要评估好技术选型。两者的功能其实差不多，混用的价值也不是很大。或者你能补充些场景，我们再一起看看是否合适。","utype":1,"comment_id":179779,"user_name":"作者回复"}],"uid":1038415,"ucode":"E2E2E9BD3F5048","score":1582097115643029,"comment_content":"丁老师你好，问一下，建议 JPA 和 Mybatis 混用么？我看有些项目是混着用的。","like_count":0,"aid":82905},{"had_liked":false,"product_id":100023501,"comment_is_top":false,"id":179328,"user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/e9/dcc63d8f.jpg","comment_ctime":1581972716,"can_delete":false,"user_name":"怕什么，抱紧我","product_type":"c3","replies":[{"ctime":1583047448,"user_name_real":"DigitalSonic","uid":1008460,"id":71007,"content":"关于阅读源码，其实我只是带着大家粗略的看一下，如果你对源码和原理没有太多兴趣，就当是个了解；如果是希望了解源码的，那我给大家挑选了核心部分的脉络，可以从我选择的部分入手去仔细再阅读一下。阅读源码是需要花时间的，我们在课程中不能从头到尾来读，所以只能选择最重要的部分。\n如果说怎么才能找到最核心的代码，那就需要对整个结构有个了解，不然这么多代码，很容易就会迷路了，而这个过程就是要花时间花精力去读的。","utype":1,"comment_id":179328,"user_name":"作者回复"}],"uid":1318633,"ucode":"CBCEA76E9EF33B","score":1581972716438823,"comment_content":"疑惑：绑定一些Attribute怎么理解?\n另外老师点到一个方法,就说这个方法是干什么用的！那么我们自己阅读的时候,怎么才知道这个方法是干什么用的呢！怎么才知道这个类是核心方法呢？我们要去详细看这个方法的内部实现吗？还是我们根据方法的名字理解用途！\n例如doDispatch方法中有一个：HandlerExecutionChain mappedHandler = getHandler(processedRequest)；\n这个 HandlerExecutionChain 类从来就没有见过！那我看的时候怎么理解啊！\n因为我每次跟着老师看源码,头都是晕的,甚至源码的某些方法都没有看到过,可能提出的问题不够有水平,希望老师能解答！","like_count":0,"aid":85482}],"page":{"more":true}},"error":{},"extra":{"cost":0.068653521,"request-id":"c131628d69582ef4ad074069eb6d4d4c@2@time"}}]
    }
]